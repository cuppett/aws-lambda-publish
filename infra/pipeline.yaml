AWSTemplateFormatVersion: '2010-09-09'
Description: "Generic CodePipeline stack for Lambda CodeDeploy deployments"
Parameters:
  PipelineName:
    Type: String
    Default: LambdaGenericDeploy
  ArtifactBucketName:
    Type: String
    Default: ""
  UseBuildForPublish:
    Type: String
    Default: "true"
Conditions:
  CreateBucket: !Equals [!Ref ArtifactBucketName, ""]
Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Condition: CreateBucket
    Properties: {}
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Lambda
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: LambdaDG
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodeBuildLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionCode
                  - lambda:PublishVersion
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lambda-publish/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: 
                  - !If [CreateBucket, !Sub '${ArtifactBucket}/*', !Sub 'arn:aws:s3:::${ArtifactBucketName}/*']
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: LambdaPrep
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: S3
        Location: !If [CreateBucket, !Ref ArtifactBucket, !Ref ArtifactBucketName]
        Name: lambda-prep-artifacts
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.12
            pre_build:
              commands:
                - echo "Retrieving pipeline variables from Parameter Store"
                - EXECUTION_ID=$(echo $CODEBUILD_BUILD_ID | cut -d: -f1)
                - PARAM_PREFIX="/lambda-publish/pipeline/$PIPELINE_NAME/$EXECUTION_ID"
                - echo "Parameter prefix: $PARAM_PREFIX"
                # Get variables from SSM
                - IMAGE_URI=$(aws ssm get-parameter --name "$PARAM_PREFIX/IMAGE_URI" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
                - FUNCTION_NAME=$(aws ssm get-parameter --name "$PARAM_PREFIX/FUNCTION_NAME" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
                - ALIAS_NAME=$(aws ssm get-parameter --name "$PARAM_PREFIX/ALIAS_NAME" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
                - DEPLOY_APP=$(aws ssm get-parameter --name "$PARAM_PREFIX/DEPLOY_APP" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
                - DEPLOY_GROUP=$(aws ssm get-parameter --name "$PARAM_PREFIX/DEPLOY_GROUP" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
                - DEPLOY_CONFIG=$(aws ssm get-parameter --name "$PARAM_PREFIX/DEPLOY_CONFIG" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
                - echo "IMAGE_URI=$IMAGE_URI"
                - echo "FUNCTION_NAME=$FUNCTION_NAME"
                - echo "ALIAS_NAME=$ALIAS_NAME"
            build:
              commands:
                - echo "Updating Lambda function with new image"
                - |
                  if [ -n "$IMAGE_URI" ] && [ -n "$FUNCTION_NAME" ]; then
                    echo "Updating function $FUNCTION_NAME with image $IMAGE_URI"
                    aws lambda update-function-code --function-name "$FUNCTION_NAME" --image-uri "$IMAGE_URI"
                    
                    echo "Waiting for function update to complete"
                    aws lambda wait function-updated --function-name "$FUNCTION_NAME"
                    
                    echo "Publishing new version"
                    VERSION=$(aws lambda publish-version --function-name "$FUNCTION_NAME" --query 'Version' --output text)
                    echo "Published version: $VERSION"
                    
                    # Create appspec.json for CodeDeploy
                    cat > appspec.json << EOF
                  {
                    "version": "0.0",
                    "Resources": [
                      {
                        "TargetService": {
                          "Type": "AWS::Lambda::Function",
                          "Properties": {
                            "Name": "$FUNCTION_NAME",
                            "Alias": "$ALIAS_NAME",
                            "CurrentVersion": "\$LATEST",
                            "TargetVersion": "$VERSION"
                          }
                        }
                      }
                    ]
                  }
                  EOF
                    
                    echo "Generated appspec.json:"
                    cat appspec.json
                  else
                    echo "ERROR: Missing required variables IMAGE_URI or FUNCTION_NAME"
                    exit 1
                  fi
          artifacts:
            files:
              - appspec.json
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateAlias
                Resource: "*"
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: PipelinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource: 
                  - !If [CreateBucket, !Sub '${ArtifactBucket}/*', !Sub 'arn:aws:s3:::${ArtifactBucketName}/*']
                  - !If [CreateBucket, !Ref ArtifactBucket, !Sub 'arn:aws:s3:::${ArtifactBucketName}']
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !If [CreateBucket, !Ref ArtifactBucket, !Ref ArtifactBucketName]
      Stages:
        - Name: Source
          Actions:
            - Name: SourcePlaceholder
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !If [CreateBucket, !Ref ArtifactBucket, !Ref ArtifactBucketName]
                S3ObjectKey: placeholder.zip
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: Prepare
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployToCodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
Outputs:
  PipelineName:
    Value: !Ref CodePipeline
