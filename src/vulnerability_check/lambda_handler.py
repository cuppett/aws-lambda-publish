import json
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

SEVERITY_LEVELS = {
    "INFORMATIONAL": 0,
    "LOW": 1,
    "MEDIUM": 2,
    "HIGH": 3,
    "CRITICAL": 4
}

def handler(event, context):
    """
    Evaluates ECR scan results against vulnerability threshold.
    
    Args:
        event: Contains scanResults and threshold
        context: Lambda context
        
    Returns:
        dict: {"deploymentAllowed": bool, "vulnerabilities": dict}
    """
    try:
        scan_results = event.get("scanResults", {})
        threshold = event.get("threshold", "HIGH")
        
        logger.info(f"Evaluating vulnerabilities with threshold: {threshold}")
        
        # Get the threshold level
        threshold_level = SEVERITY_LEVELS.get(threshold.upper(), 3)
        
        # Extract vulnerability findings
        findings = scan_results.get("ImageScanFindings", {}).get("Findings", [])
        
        # Count vulnerabilities by severity
        vulnerability_counts = {
            "INFORMATIONAL": 0,
            "LOW": 0,
            "MEDIUM": 0,
            "HIGH": 0,
            "CRITICAL": 0
        }
        
        blocking_vulnerabilities = []
        
        for finding in findings:
            severity = finding.get("Severity", "UNKNOWN")
            if severity in vulnerability_counts:
                vulnerability_counts[severity] += 1
                
                # Check if this vulnerability blocks deployment
                severity_level = SEVERITY_LEVELS.get(severity, 0)
                if severity_level >= threshold_level:
                    blocking_vulnerabilities.append({
                        "name": finding.get("Name", "Unknown"),
                        "severity": severity,
                        "description": finding.get("Description", "")
                    })
        
        deployment_allowed = len(blocking_vulnerabilities) == 0
        
        result = {
            "deploymentAllowed": deployment_allowed,
            "vulnerabilities": {
                "counts": vulnerability_counts,
                "threshold": threshold,
                "blocking": blocking_vulnerabilities,
                "totalFindings": len(findings)
            }
        }
        
        logger.info(f"Vulnerability check result: {json.dumps(result)}")
        
        return result
        
    except Exception as e:
        logger.error(f"Error evaluating vulnerabilities: {str(e)}")
        raise e